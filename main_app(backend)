from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import db_helper
import generic_helper

app = FastAPI()

inprogress_orders = {}


@app.post("/webhook")
async def handle_request(request: Request):
    # Retrieve the JSON data from the request
    payload = await request.json()

    # Extract the necessary information from the payload
    # based on the structure of the WebhookRequest from Dialogflow
    intent = payload['queryResult']['intent']['displayName']
    parameters = payload['queryResult']['parameters']
    output_contexts = payload['queryResult']['outputContexts']
    session_id = generic_helper.extract_session_id(output_contexts[0]["name"])

    intent_handler_dict = {
        'order.add-context: ongoing-order': add_to_order,
        'order.remove-context:ongoing-order': remove_from_order,
        'order.complete-content: ongoing order': complete_order,
        'track.order - context: ongoing-tracking': track_order
    }

    return intent_handler_dict[intent](parameters, session_id)


def save_to_db(order: dict):
    next_order_id = db_helper.get_next_order_id()

    # Insert individual items along with quantity in orders table
    for food_item, quantity in order.items():
        rcode = db_helper.insert_order_item(
            food_item,
            quantity,
            next_order_id
        )

        if rcode == -1:
            return -1

    # Now insert order tracking status
    db_helper.insert_order_tracking(next_order_id, "in progress")

    return next_order_id


def complete_order(parameters: dict, session_id: str):
    if session_id not in inprogress_orders:
        fulfillment_text = "I'm having trouble finding your order. Sorry! Can you place a new order please?"
    else:
        order = inprogress_orders[session_id]
        order_id = save_to_db(order)
        if order_id == -1:
            fulfillment_text = "Sorry, I couldn't process your order due to a backend error. " \
                               "Please place a new order again"
        else:
            order_total = db_helper.get_total_order_price(order_id)

            fulfillment_text = f"Awesome. We have placed your order. " \
                               f"Here is your order id # {order_id}. " \
                               f"Your order total is Rs.{order_total} which you can pay at the time of delivery!"

        del inprogress_orders[session_id]

    return JSONResponse(content={
        "fulfillmentText": fulfillment_text
    })


def add_to_order(parameters: dict, session_id: str):
    food_items = parameters["food-items"]
    quantities = parameters["number"]

    if len(food_items) != len(quantities):
        fulfillment_text = "Sorry I didn't understand. Can you please specify food items and quantities clearly?"
    else:
        new_food_dict = dict(zip(food_items, quantities))

        if session_id in inprogress_orders:
            current_food_dict = inprogress_orders[session_id]
            current_food_dict.update(new_food_dict)
            inprogress_orders[session_id] = current_food_dict
        else:
            inprogress_orders[session_id] = new_food_dict

        order_str = generic_helper.get_str_from_food_dict(inprogress_orders[session_id])
        fulfillment_text = f"So far you have: {order_str}. Do you need anything else?"

    return JSONResponse(content={
        "fulfillmentText": fulfillment_text
    })


def remove_from_order(parameters: dict, session_id: str):
    if session_id not in inprogress_orders:
        return JSONResponse(content={
            "fulfillmentText": "I'm having trouble finding your order. Sorry! Can you place a new order please?"
        })

    food_items = parameters.get("food-items", [])
    quantities_to_remove = parameters.get("number", [])  # Extract quantities to remove
    if not food_items or not quantities_to_remove:
        return JSONResponse(content={
            "fulfillmentText": "Sorry, I didn't understand. Please specify both food items and their quantities to remove."
        })
    current_order = inprogress_orders[session_id]

    removed_items = []
    no_such_items = []

    for food_item, quantity_to_remove in zip(food_items, quantities_to_remove):
        if food_item not in current_order:
            no_such_items.append(food_item)
        else:
            if current_order[food_item] >= quantity_to_remove:
                current_order[food_item] -= quantity_to_remove
                removed_items.append((food_item, quantity_to_remove))
            else:
                no_such_items.append(food_item)

    # Remove items from the order completely if their quantity becomes zero
    current_order = {item: quantity for item, quantity in current_order.items() if quantity > 0}

    fulfillment_text = ""

    if removed_items:
        removed_str = ", ".join([f"{quantity} {food_item}" for food_item, quantity in removed_items])
        fulfillment_text = f"Removed {removed_str} from your order!"

    if no_such_items:
        no_such_str = ", ".join(no_such_items)
        fulfillment_text += f" Sorry, your current order does not have {no_such_str}."

    if not current_order:
        fulfillment_text += " Your order is now empty!"
    else:
        # Pass current_order to get_str_from_food_dict to display the remaining items
        order_str = generic_helper.get_str_from_food_dict(current_order)
        fulfillment_text += f" Here is what is left in your order: {order_str}"

    return JSONResponse(content={
        "fulfillmentText": fulfillment_text
    })



def track_order(parameters: dict, session_id: str):
    if 'number' in parameters:
        order_id = int(parameters['number'])
        order_status = db_helper.get_order_status(order_id)
        if order_status:
            fulfillment_text = f"The order status for order id: {order_id} is: {order_status}"
        else:
            fulfillment_text = f"No order found with order id: {order_id}"
    else:
        fulfillment_text = "The 'order_id' parameter is missing. Please provide an order ID."

    return JSONResponse(content={
        "fulfillmentText": fulfillment_text
    })
